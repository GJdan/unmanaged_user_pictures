<?php
/**
 * Stream wrapper class for the shared:// stream wrapper.
 */
class DrupalSharedStreamWrapper extends DrupalLocalStreamWrapper {
  /**
   * Implements abstract public function getDirectoryPath()
   *
   * This stream wrapper is hardcoded to sites/all/files for now.
   * @todo  Add a settings page and allow custom shared file directory.
   */
  public function getDirectoryPath() {
    return 'sites/all/files';
  }
  
  /**
   * Overrides getExternalUrl().
   *
   * Return the HTML URI of a public file.
   */
  function getExternalUrl() {
    $path = str_replace('\\', '/', $this->getTarget());
    return $GLOBALS['base_url'] . '/' . self::getDirectoryPath() . '/' . drupal_encode_path($path);
  }
}

/**
 * Implements hook_stream_wrappers().
 */
function unmanaged_user_pictures_stream_wrappers() {
  return array(
      'shared' => array(
          'name' => t('Shared files'),
          'class' => 'DrupalSharedStreamWrapper',
          'description' => t('Sharable local files served by the webserver.'),
          'type' => STREAM_WRAPPERS_LOCAL_NORMAL,
      ),
  );
}

/**
 * Implements hook_form_alter().
 */
function unmanaged_user_pictures_form_alter(&$form, &$form_state, $form_id){
  if ($form_id == 'user_profile_form') {  // Ensure that unmanaged_user_pictures_user_profile_submit is the first
                                          // submit function run.  (This is probably against a number of rules...)
    
    $form['#submit'][1] = $form['#submit'][0];
    unset($form['#submit'][0]);
    $form['#submit'][0] = 'unmanaged_user_pictures_user_profile_submit';
    sort($form['#submit']);
    
    // Check if a current picture exists and set #access to delete and upload fields respectively
    if (empty($form['picture']['picture_current']['#markup'])) {
      $form['picture']['picture_delete']['#access'] = FALSE;
      $form['picture']['picture_upload']['#access'] = TRUE;
    } else {
      $form['picture']['picture_delete']['#access'] = TRUE;
      $form['picture']['picture_upload']['#access'] = FALSE;
    }
  }
}

/**
 * A Custom submit function for user/%/edit pages to save, replace and delete
 * user pictures in a way that can be shared between sites with a shared users table.
 * @param array $form
 * @param array $form_state
 */
function unmanaged_user_pictures_user_profile_submit($form, $form_state){
  $account = user_load($form['#user']->uid);
  $picture = $form_state['values']['picture_upload'];
  
  // If a picture has been uploaded parse it for information and prepare the final destination.
  if ($picture) {
    $info = image_get_info($picture->uri);
    $picture_directory =  'shared://' . variable_get('user_picture_path', 'pictures');
    $destination = file_stream_wrapper_uri_normalize($picture_directory . '/picture-' . $account->uid . '-' . REQUEST_TIME . '.' . $info['extension']);
  }
  // If picture is to be deleted... Delete it.
  if ($form_state['values']['picture_delete'] == 1) {
    file_unmanaged_delete($account->picture_unmanaged);
    $account->picture_unmanaged = '';
  }
  
  // If a picture has been uploaded, delete the old one if it exists
  // and place the new one in the shared files directory.
  if (isset($info['extension'])) {
    // Prepare the pictures directory.
    file_prepare_directory($picture_directory, FILE_CREATE_DIRECTORY);
    
    // Move the temporary file into the final location.
    if ($picture = file_copy($picture, $destination, FILE_EXISTS_RENAME)) {
      $picture->status = FILE_STATUS_PERMANENT;
      
      // Delete old picture file if it exists.
      if ($account->picture_unmanaged) {
        file_unmanaged_delete($account->picture_unmanaged);
      }
      // Set picture_unmanaged to uri of new picture.
      $account->picture_unmanaged = $picture->uri;
    }
  }
  // Save account with new picture.
  user_save($account);
}

/**
 * Override template_preprocess_user_picture() to display user pictures from
 * the shared files directory.
 *
 * @see template_preprocess_user_picture()
 * @todo test compatibility with gravatar module
 */
function unmanaged_user_pictures_preprocess_user_picture(&$variables) {
  $using_shared = TRUE;
  $q = db_query("SELECT {uid, name, picture_unmanaged} FROM {users} WHERE uid = :uid", array(':uid' => $variables['account']->uid));
  $account = $q->fetchObject();
  
  if (!empty($account->picture_unmanaged)) {
    $filepath = $account->picture_unmanaged;
    // Only clear the user_picture if the shared using picture is being used.
    $variables['user_picture'] = '';
  }
  elseif (variable_get('user_picture_default', '')) {
    $filepath = variable_get('user_picture_default', '');
    $using_shared = FALSE;
  }
  if (variable_get('user_pictures', 0) && $using_shared) {
    if (isset($filepath)) {
      $alt = t("@user's picture", array('@user' => format_username($account)));
      // If the image does not have a valid Drupal scheme (for eg. HTTP),
      // don't load image styles.
      if (module_exists('image') && file_valid_uri($filepath) && $style = variable_get('user_picture_style', '')) {
        $variables['user_picture'] = theme('unmanaged_user_pictures_shared_files', array('style_name' => $style, 'path' => $filepath, 'alt' => $alt, 'title' => $alt));
      }
      else {
        $variables['user_picture'] = theme('image', array('path' => $filepath, 'alt' => $alt, 'title' => $alt));
      }
      if (!empty($account->uid) && user_access('access user profiles')) {
        $attributes = array('attributes' => array('title' => t('View user profile.')), 'html' => TRUE);
        $variables['user_picture'] = l($variables['user_picture'], "user/$account->uid", $attributes);
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function unmanaged_user_pictures_theme($existing, $type, $theme, $path) {
  return array(
    'unmanaged_user_pictures_shared_files' => array(
      'variables' => array(
        'style_name' => NULL,
        'path' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
      ),
    ),
  );
}

/**
 * This theme function is designed to deal with the limitation that
 * theme_image_style does not work with images outside the files directory.
 *
 * Usage is the same as theme_image_style.
 *
 * @param $variables
 */
function theme_unmanaged_user_pictures_shared_files($variables) {
  $styled_path = image_style_path($variables['style_name'], $variables['path']);
  if (!file_exists($styled_path)) {
    $style = image_style_load($variables['style_name']);
    image_style_create_derivative($style, $variables['path'], $styled_path);
  }
  $variables['path'] = $styled_path;
  return theme('image', $variables);
}
